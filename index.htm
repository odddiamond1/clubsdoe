<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Club Hub</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Poppins:wght@300;400;600&display=swap');
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f8f5f2;
        }
        .title-font {
            font-family: 'Playfair Display', serif;
        }
        .book-card {
            background: linear-gradient(135deg, #fff9f0 0%, #fff 100%);
            border-left: 6px solid #d4a373;
        }
        .movie-card {
            background: linear-gradient(135deg, #f0f8ff 0%, #fff 100%);
            border-left: 6px solid #4cc9f0;
        }
        .music-card {
            background: linear-gradient(135deg, #f9f0ff 0%, #fff 100%);
            border-left: 6px solid #b5179e;
        }
        .card-hover:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }
        .loading-spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border-left-color: #09f;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="min-h-screen">
    <!-- Header -->
    <header class="bg-gradient-to-r from-indigo-700 to-purple-600 text-white py-8">
        <div class="container mx-auto px-4">
            <h1 class="title-font text-4xl md:text-5xl font-bold text-center mb-2">Club Hub</h1>
            <p class="text-center text-lg md:text-xl opacity-90">Books, Movies & Music.</p>
        </div>
    </header>
    <!-- Main Content -->
    <main class="container mx-auto px-4 py-12">
        <h2 class="title-font text-3xl font-bold text-center mb-12">Upcoming Club Meetings</h2>
        <!-- Cards will be rendered here -->
        <div id="club-cards" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 items-stretch"></div>
    </main>

    <!-- Previous Clubs Section -->
    <section id="previous-clubs" class="container mx-auto px-4 py-12"></section>

    <!-- Footer -->
    <footer class="bg-gradient-to-r from-indigo-700 to-purple-600 text-white py-12 mt-16">
        <!-- <div class="container mx-auto px-4"> -->
            <!-- <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mb-8"> -->
                <!-- Club Info -->
                <!-- <div class="text-center md:text-left"> -->
                    <!-- <h3 class="title-font text-2xl font-bold mb-4">Club Hub</h3>
                    <p class="text-purple-100 mb-4">Bringing together passionate readers, movie enthusiasts, and music lovers in one vibrant community.</p>
                    <div class="flex justify-center md:justify-start space-x-4">
                        <a href="#" class="text-purple-200 hover:text-white transition duration-300">
                            <i class="fab fa-facebook-f text-xl"></i>
                        </a>
                        <a href="#" class="text-purple-200 hover:text-white transition duration-300">
                            <i class="fab fa-twitter text-xl"></i>
                        </a>
                        <a href="#" class="text-purple-200 hover:text-white transition duration-300">
                            <i class="fab fa-instagram text-xl"></i>
                        </a>
                        <a href="#" class="text-purple-200 hover:text-white transition duration-300">
                            <i class="fab fa-discord text-xl"></i>
                        </a>
                    </div>
                </div> -->

                <!-- Quick Links -->
                <!-- <div class="text-center">
                    <h4 class="font-semibold text-lg mb-4">Quick Links</h4>
                    <ul class="space-y-2">
                        <li><a href="#" class="text-purple-200 hover:text-white transition duration-300 flex items-center justify-center"><i class="fas fa-book-open mr-2"></i>Book Club</a></li>
                        <li><a href="#" class="text-purple-200 hover:text-white transition duration-300 flex items-center justify-center"><i class="fas fa-film mr-2"></i>Movie Club</a></li>
                        <li><a href="#" class="text-purple-200 hover:text-white transition duration-300 flex items-center justify-center"><i class="fas fa-music mr-2"></i>Music Club</a></li>
                        <li><a href="#" class="text-purple-200 hover:text-white transition duration-300 flex items-center justify-center"><i class="fas fa-calendar mr-2"></i>Schedule</a></li>
                    </ul>
                </div> -->

                <!-- Contact Info -->
                <!-- <div class="text-center md:text-right">
                    <h4 class="font-semibold text-lg mb-4">Get In Touch</h4>
                    <div class="space-y-2">
                        <p class="text-purple-200 flex items-center justify-center md:justify-end">
                            <i class="fas fa-envelope mr-2"></i>
                            hello@clubhub.com
                        </p>
                        <p class="text-purple-200 flex items-center justify-center md:justify-end">
                            <i class="fas fa-users mr-2"></i>
                            Join our community
                        </p>
                        <p class="text-purple-200 flex items-center justify-center md:justify-end">
                            <i class="fas fa-heart mr-2"></i>
                            Made with passion
                        </p>
                    </div>
                </div>
            </div> -->

            <!-- Bottom Bar -->
            <div class="border-t border-purple-400 pt-6">
                <div class="text-center">
                    <p class="text-purple-200 text-lg font-semibold tracking-wider">
                        Club Hub
                    </p>
                    <p class="text-purple-300 text-sm mt-1">
                        Hubbing all of your clubs in one place.
                    </p>
                </div>
            </div>
        </div>
    </footer>
       <script>
        let clubData = {};
        document.addEventListener('DOMContentLoaded', async function () {
            try {
                const sheetdbUrl = 'https://sheetdb.io/api/v1/ebdg1jebrc6wv';
                const response = await fetch(sheetdbUrl);
                const rows = await response.json();
                clubData = sheetRowsToClubData(rows);
                const previousClubs = collectPreviousClubs(rows);
                sortAndRenderClubCards();
                renderPreviousClubs(previousClubs);
            } catch (err) {
                console.error("Error loading club data:", err);
            }
        });

        function sheetRowsToClubData(rows) {
            const clubData = { book: {}, movie: {}, music: {} };
            rows.forEach(row => {
                if (row.type === "book") clubData.book = row;
                if (row.type === "movie") clubData.movie = row;
                if (row.type === "music") clubData.music = row;
            });
            return clubData;
        }

        function collectPreviousClubs(rows) {
            const previous = { book: [], movie: [], music: [] };
            rows.forEach(row => {
                if (row.type === "bookss") previous.book.push(row);
                if (row.type === "moviess") previous.movie.push(row);
                if (row.type === "musics") previous.music.push(row);
            });
            return previous;
        }

        function parseDate(dateStr) {
            if (!dateStr) return null;
            const d = Date.parse(dateStr);
            if (!isNaN(d)) return new Date(d);
            const parts = dateStr.match(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/);
            if (parts) {
                const m = parseInt(parts[1], 10), day = parseInt(parts[2], 10), y = parseInt(parts[3], 10);
                return new Date(y, m - 1, day);
            }
            return null;
        }

        const cardConfigs = {
            book: {
                badge: 'Book Club',
                icon: 'fa-book-open',
                color: 'amber',
                fields: ['author', 'pages', 'year'],
                descKey: 'description'
            },
            movie: {
                badge: 'Movie Club',
                icon: 'fa-film',
                color: 'blue',
                fields: ['director', 'runtime', 'year'],
                descKey: 'plot'
            },
            music: {
                badge: 'Music Club',
                icon: 'fa-music',
                color: 'purple',
                fields: ['artist', 'album'],
                descKey: 'summary'
            }
        };

        function renderCard(type, data) {
            const config = cardConfigs[type];
            const div = document.createElement('div');
            div.className = `${type}-card rounded-lg shadow-md p-6 transition duration-300 card-hover flex flex-col h-full`;
            const fieldsHtml = config.fields.map(field =>
                `<p class="text-sm text-gray-600" id="${type}-${field}">${field.charAt(0).toUpperCase() + field.slice(1)}: Loading...</p>`
            ).join('');
            const extra = type === 'book' ? data.author : type === 'music' ? data.artist : '';
            div.innerHTML = `
                <div class="flex justify-between items-start mb-4">
                    <div>
                        <div class="bg-${config.color}-100 text-${config.color}-800 text-xs font-semibold px-2.5 py-0.5 rounded-full inline-block mb-2">${config.badge}</div>
                        <h3 class="title-font text-2xl font-bold mb-1">${data.title || 'Loading...'}</h3>
                        <p class="text-gray-600">Selected by: <span class="font-medium">${data.selector || 'Loading...'}</span></p>
                    </div>
                    <div class="text-${config.color}-600 text-2xl"><i class="fas ${config.icon}"></i></div>
                </div>
                <div class="flex items-center mb-4">
                    <div class="w-20 h-20 bg-gray-200 rounded flex items-center justify-center mr-4 overflow-hidden" id="${type}-cover-container"><div class="loading-spinner"></div></div>
                    <div>
                        ${fieldsHtml}
                    </div>
                </div>
                <div class="bg-${config.color}-50 p-3 rounded-lg mb-4 flex-grow"><p class="text-sm text-gray-700" id="${type}-${config.descKey}">Loading ${config.descKey}...</p></div>
                <div class="flex justify-between items-center mt-auto">
                    <div>
                        <p class="text-xs text-gray-500">Next Meeting</p>
                        <p class="font-semibold text-indigo-700">${data.date || 'TBD'}</p>
                    </div>
                    <button onclick="searchGoogle('${type}', '${data.title}', '${extra}')" class="bg-${config.color}-600 hover:bg-${config.color}-700 text-white px-4 py-2 rounded-full text-sm font-medium transition">More Info</button>
                </div>
            `;
            return div;
        }

        function updateElements(type, updates) {
            Object.entries(updates).forEach(([key, value]) => {
                if (key === 'cover') {
                    const container = document.getElementById(`${type}-cover-container`);
                    if (container && value) {
                        const img = document.createElement('img');
                        img.src = value;
                        img.alt = `${type} cover`;
                        img.className = 'w-full h-full object-cover';
                        container.innerHTML = '';
                        container.appendChild(img);
                    }
                } else {
                    const el = document.getElementById(`${type}-${key}`);
                    if (el) {
                        el.textContent = key === 'description' || key === 'plot' || key === 'summary' ? value : `${key.charAt(0).toUpperCase() + key.slice(1)}: ${value}`;
                    }
                }
            });
        }

        function sortAndRenderClubCards() {
            const cards = [
                {
                    type: 'book',
                    date: parseDate(clubData.book.date),
                    data: clubData.book,
                    fetch: (title, extra) => fetchBookData('book', title)
                },
                {
                    type: 'movie',
                    date: parseDate(clubData.movie.date),
                    data: clubData.movie,
                    fetch: (title, extra) => fetchMovieData('movie', title)
                },
                {
                    type: 'music',
                    date: parseDate(clubData.music.date),
                    data: clubData.music,
                    fetch: (title, extra) => fetchMusicData('music', title, extra)
                }
            ];
            const today = new Date();
            const validDates = cards.filter(c => c.date).length;
            if (validDates === 0) {
                const order = ['book', 'movie', 'music'];
                cards.sort((a, b) => order.indexOf(a.type) - order.indexOf(b.type));
            } else {
                cards.sort((a, b) => {
                    if (!a.date && !b.date) return 0;
                    if (!a.date) return 1;
                    if (!b.date) return -1;
                    const aDiff = Math.abs(a.date - today);
                    const bDiff = Math.abs(b.date - today);
                    return aDiff - bDiff;
                });
            }
            const container = document.getElementById('club-cards');
            container.innerHTML = '';
            cards.forEach(card => {
                const div = renderCard(card.type, card.data);
                container.appendChild(div);
                if (card.fetch) card.fetch(card.data.title, card.data.artist || '');
            });
        }


        async function fetchBookData(type, title) {
            try {
                const response = await fetch(`https://openlibrary.org/search.json?title=${encodeURIComponent(title)}`);
                const data = await response.json();
                if (!data.docs || data.docs.length === 0) {
                    updateElements(type, { author: 'Unknown', pages: 'N/A', year: 'N/A', description: 'No description available.' });
                    return;
                }
                const book = data.docs[0];
                const author = book.author_name?.[0] || 'Unknown';
                const pages = book.number_of_pages_median || 'N/A';
                const year = book.first_publish_year || 'N/A';
                let description = 'No description available.';
                if (book.key) {
                    const descRes = await fetch(`https://openlibrary.org${book.key}.json`);
                    const descData = await descRes.json();
                    const descText = descData.description?.value || descData.description || 'No description available.';
                    const maxLength = 250;
                    description = descText.length > maxLength ? descText.slice(0, maxLength).trim() + '...' : descText;
                }
                const cover = book.cover_i ? `https://covers.openlibrary.org/b/id/${book.cover_i}-M.jpg` : null;
                updateElements(type, { author, pages, year, description, cover });
            } catch (err) {
                console.error("Book API error:", err);
                updateElements(type, { author: 'Error', pages: 'Error', year: 'Error', description: 'Error loading description.' });
            }
        }
        async function fetchMovieData(type, title) {
            try {
                const response = await fetch(`https://www.omdbapi.com/?apikey=7d308091&t=${encodeURIComponent(title)}`);
                const data = await response.json();
                if (data.Response === 'True') {
                    const director = data.Director || 'Unknown';
                    const runtime = data.Runtime || 'N/A';
                    const year = data.Year || 'N/A';
                    const plot = data.Plot || 'No plot available.';
                    const cover = data.Poster && data.Poster !== 'N/A' ? data.Poster : null;
                    updateElements(type, { director, runtime, year, plot, cover });
                } else {
                    updateElements(type, { director: 'Unknown', runtime: 'N/A', year: 'N/A', plot: 'No plot available.' });
                }
            } catch (error) {
                console.error('Error fetching movie data:', error);
                updateElements(type, { director: 'Error', runtime: 'Error', year: 'Error', plot: 'Error loading plot.' });
            }
        }
        async function fetchMusicData(type, albumTitle, artist) {
            try {
                const apiKey = '86e98f1783dd1af823523204bb2e2b4a';
                const response = await fetch(`https://ws.audioscrobbler.com/2.0/?method=album.getinfo&api_key=${apiKey}&artist=${encodeURIComponent(artist)}&album=${encodeURIComponent(albumTitle)}&format=json`);
                const data = await response.json();
                if (!data || !data.album) {
                    updateElements(type, { artist: 'Unknown', album: 'N/A', summary: 'No description available.' });
                    return;
                }
                const album = data.album;
                const artistName = album.artist || 'Unknown';
                const albumName = album.name || 'N/A';
                const summary = album.wiki?.summary || 'No description available.';
                const maxLength = 250;
                const shortSummary = summary.length > maxLength ? summary.slice(0, maxLength).trim() + '...' : summary;
                let cover = null;
                const desiredSizes = ["extralarge", "large", "medium"];
                for (const size of desiredSizes) {
                    const match = album.image.find(img => img.size === size && img['#text']);
                    if (match) {
                        cover = match['#text'];
                        break;
                    }
                }
                updateElements(type, { artist: artistName, album: albumName, summary: shortSummary, cover });
            } catch (error) {
                console.error("Error fetching music data:", error);
                updateElements(type, { artist: 'Error', album: 'Error', summary: 'Error loading summary.' });
            }
        }

        function renderPreviousClubs(previousClubs) {
            const section = document.getElementById('previous-clubs');
            section.innerHTML = `
                <h2 class="title-font text-3xl font-bold text-center mb-12">Previous Club Picks</h2>
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white shadow-md rounded-lg overflow-hidden">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Club</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Selector</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            ${renderPreviousRows(previousClubs)}
                        </tbody>
                    </table>
                </div>
            `;
        }

        function renderPreviousRows(previousClubs) {
            const allPrevious = [];
            ['book', 'movie', 'music'].forEach(type => {
                previousClubs[type].forEach(item => {
                    allPrevious.push({ ...item, clubType: type });
                });
            });
            allPrevious.sort((a, b) => {
                const dateA = parseDate(a.date);
                const dateB = parseDate(b.date);
                if (!dateA && !dateB) return 0;
                if (!dateA) return 1;
                if (!dateB) return -1;
                return dateB - dateA; // Most recent first
            });
            const rows = [];
            allPrevious.slice(0, 3).forEach(item => {
                const config = cardConfigs[item.clubType];
                rows.push(`
                    <tr>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                                <div class="text-sm font-medium text-gray-900">${config.badge}</div>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm text-gray-900">${item.title || 'N/A'}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm text-gray-500">${item.selector || 'N/A'}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm text-gray-500">${item.date || 'N/A'}</div>
                        </td>
                    </tr>
                `);
            });
            return rows.join('');
        }

        function searchGoogle(type, title, author = '') {
            let searchQuery = '';

            if (type === 'book') {
                searchQuery = author ? `${title} ${author} book` : `${title} book`;
            } else if (type === 'movie') {
                searchQuery = `${title} movie`;
            } else if (type === 'music') {
                searchQuery = author ? `${title} ${author} album` : `${title} album`;
            }

            const googleUrl = `https://www.google.com/search?q=${encodeURIComponent(searchQuery)}`;
            window.open(googleUrl, '_blank');
        }

    </script>
</body>
</html>
